import pandas as pd

## this the folder where the results from cellranger are going to go


#alignment_type = 'cellranger'
alignment_type = 'kallisto'


if alignment_type == 'cellranger':
        print('Using cellranger')
	folder_out_alignment="/project/sims-lab/lmorrill/data/lightning/alignment/cellrangerOUT/"
elif alignment_type == 'kallisto':
        print('Using Kallisto')
        folder_out_alignment="/project/sims-lab/lmorrill/data/lightning/alignment/KallistoOUT/"
else:
        print('Specify <alignment_type>')

SAMPLES = pd.read_csv("samples.csv", sep='\t')
print(SAMPLES)
# 0  G1_rep1  636200_14,654654_14,660727_14,660728_14,660729...
# 1  G1_rep2  636200_18,654654_18,660727_18,660728_18,660729...
# 2  G2_rep1  636200_15,654654_15,660727_15,660728_15,660729...


#DATETIME = "date +'%Y-%m-%dT%H:%M:%S'"

## example of one of the scripts that Charly ran
## /t1-data/project/cncb/shared/proj002/src/runCR2_proj2_2020_G1_rep1.sh
## LC=24
## LM=300
## change path to the output path for cellranger (output will be created only in the current folder)
#/home/l/lmorrill/t1data/cellranger/cellranger-7.1.0/bin/cellranger count --id=G1_rep1 --fastqs=/t1-data/project/cncb/shared/proj002/backup/CELLRANGER_OUT/ --sample=636200_14,654654_14,660727_14,660728_14,660729_14,660730_14,660731_14,660732_14 --transcriptome=/home/l/lmorrill/t1data/data/genomes/dmel649CORRECTED --chemistry=SC3Pv3 --localcores=$LC --localmem=$LM --force-cells=10000 --nosecondary

## fixed parameters
#transcriptome_version = 'dmel649CORRECTED'
transcriptome_version = 'dmel649Chrimson'
transcriptome="/project/sims-lab/lmorrill/data/genomes/" + transcriptome_version
chemistry="SC3Pv3"
local_memory="100"
local_cores="24"

folder_out_alignment = folder_out_alignment + transcriptome_version + '/'

rule all:
    input:
        #expand(folder_out_alignment+"{sample}/{sample}/outs/filtered_feature_bc_matrix/features.tsv.gz", sample=SAMPLES["sample"]) ## run cellranger
        expand(folder_out_alignment+"{sample}/", sample=SAMPLES["sample"]) ## run kallisto

## The reference has been created as follow, and as specified in <~/projects/general/genomes_kallisto/about >
# kb ref ../genomes/dmel-all-chromosome-r6.49_Chrimson.fasta ../genomes/dmel-all-r6.49_CORRECTED_Chrimson.gtf -i dmel-all-r6.49_CORRECTED_Chrimson_KallistoINDEX -g dmel-all-r6.49_CORRECTED_Chrimson_KallistoT2G -f1 dmel-all-r6.49_CORRECTED_ChrimsonFASTA
## I assume that, if the chemistry if SC3Pv3, then the technology is 10XV3
rule kallisto_alignment:
    input:
        "../data/lightning/about_files/about-condition-{sample}.txt"
    log:
        "logs/kallisto_count_{sample}"
    params:
        cells= lambda wildcards: ' '.join(["/project/cncb/shared/proj002/backup/CELLRANGER_OUT/" + x for x in SAMPLES[SAMPLES['sample'] == wildcards.sample]['cells'].iloc[0].split(',')])
    output:
       folder_out_alignment+"{sample}/"
    shell:
        'kb count -fastqs ' + "{params.cells}  -o {output} -i ~/projects/general/genomes_kallisto/dmel-all-r6.49_CORRECTED_Chrimson_KallistoINDEX -g ~/projects/general/genomes_kallisto/dmel-all-r6.49_CORRECTED_Chrimson_KallistoT2G - x 10XV3"


rule cellranger_count:
    input:
        "../data/lightning/about_files/about-condition-{sample}.txt"
    log:
        "logs/cellranger_count_{sample}"
    params:
        cells= lambda wildcards: SAMPLES[SAMPLES['sample'] == wildcards.sample]['cells'].iloc[0]
    output:
       folder_out_alignment+"{sample}/{sample}/outs/filtered_feature_bc_matrix/features.tsv.gz"
    shell:
        ## note that any folder which has been created for the output should be deleted first, as otherwise cellranger throws an error
        "cd {folder_out_alignment}/{wildcards.sample}; " + "rm -r " + folder_out_alignment +"{wildcards.sample}/{wildcards.sample}; " + "/project/sims-lab/lmorrill/cellranger/cellranger-7.1.0/bin/cellranger count --id={wildcards.sample} --fastqs=/project/cncb/shared/proj002/backup/CELLRANGER_OUT/ --sample={params.cells} --transcriptome={transcriptome} --chemistry={chemistry} --force-cells=10000 --nosecondary"

