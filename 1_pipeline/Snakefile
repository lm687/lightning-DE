import pandas as pd

## this the folder where the results from cellranger are going to go

alignment_type = 'cellranger'

if alignment_type == 'cellranger':
        print('Using cellranger')
	folder_out_alignment="/project/sims-lab/lmorrill/data/lightning/alignment/cellrangerOUT/"
elif alignment_type == 'kallisto':
        print('Using Kallisto')
        folder_out_alignment="/project/sims-lab/lmorrill/data/lightning/alignment/KallistoOUT/"
else:
        print('Specify <alignment_type>')

SAMPLES = pd.read_csv("samples.csv", sep='\t')
print(SAMPLES)
## this fle looks like this:
#     sample                                              cells
# 0  G1_rep1  636200_14,654654_14,660727_14,660728_14,660729...
# 1  G1_rep2  636200_18,654654_18,660727_18,660728_18,660729...
# 2  G2_rep1  636200_15,654654_15,660727_15,660728_15,660729...

## Select only first row, for now (*********************************************)
#SAMPLES = SAMPLES.head(1)
#print(SAMPLES)

#DATETIME = "date +'%Y-%m-%dT%H:%M:%S'"

## example of one of the scripts that Charly ran
## /t1-data/project/cncb/shared/proj002/src/runCR2_proj2_2020_G1_rep1.sh
## LC=24
## LM=300
## change path to the output path for cellranger (output will be created only in the current folder)
#/home/l/lmorrill/t1data/cellranger/cellranger-7.1.0/bin/cellranger count --id=G1_rep1 --fastqs=/t1-data/project/cncb/shared/proj002/backup/CELLRANGER_OUT/ --sample=636200_14,654654_14,660727_14,660728_14,660729_14,660730_14,660731_14,660732_14 --transcriptome=/home/l/lmorrill/t1data/data/genomes/dmel649CORRECTED --chemistry=SC3Pv3 --localcores=$LC --localmem=$LM --force-cells=10000 --nosecondary

## fixed parameters
#transcriptome_version = 'dmel649CORRECTED'
transcriptome_version = 'dmel649Chrimson'
transcriptome="/project/sims-lab/lmorrill/data/genomes/" + transcriptome_version
chemistry="SC3Pv3"
#job_threads=2
local_memory="100"
#local_memory="300"
local_cores="24"

folder_out_alignment = folder_out_alignment + transcriptome_version + '/'

rule all:
    input:
        expand(folder_out_alignment+"{sample}/{sample}/outs/filtered_feature_bc_matrix/features.tsv.gz", sample=SAMPLES["sample"])

rule cellranger_count:
    input:
        "../data/lightning/about_files/about-condition-{sample}.txt"
    log:
        "logs/cellranger_count_{sample}"
    params:
        cells= lambda wildcards: SAMPLES[SAMPLES['sample'] == wildcards.sample]['cells'].iloc[0]
    output:
       folder_out_alignment+"{sample}/{sample}/outs/filtered_feature_bc_matrix/features.tsv.gz"
    shell:
## output folder from snakemake has to be deleted because otherwise cellranger complains
#        "cd {folder_out_cellranger}{wildcards.sample}/; /home/l/lmorrill/t1data/cellranger/cellranger-7.1.0/bin/cellranger count --id={wildcards.sample} --fastqs=/t1-data/project/cncb/shared/proj002/backup/CELLRANGER_OUT/ --sample={params.cells} --transcriptome={transcriptome} --chemistry={chemistry} --localcores={local_cores} --localmem={local_memory} --force-cells=10000 --nosecondary"
        "cd {folder_out_alignment}/{wildcards.sample}; " + "rm -r " + folder_out_alignment +"{wildcards.sample}/{wildcards.sample}; " + "/project/sims-lab/lmorrill/cellranger/cellranger-7.1.0/bin/cellranger count --id={wildcards.sample} --fastqs=/project/cncb/shared/proj002/backup/CELLRANGER_OUT/ --sample={params.cells} --transcriptome={transcriptome} --chemistry={chemistry} --force-cells=10000 --nosecondary"

#        "/home/l/lmorrill/t1data/cellranger/cellranger-7.1.0/bin/cellranger count --id={wildcards.sample} --fastqs=/t1-data/project/cncb/shared/proj002/backup/CELLRANGER_OUT/ --sample={cells} --transcriptome={transcriptome} --chemistry={chemistry} --localcores={local_cores} --localmem={local_memory} --force-cells=10000 --nosecondary"


#@follows("cd %{folder_out_cellranger}s")
#@follows(mkdir("count"))
#@transform("data/*/.sample",
#           regex(r"data/([A-Za-z0-9_]*)/.sample"),
#           r"count/\1.done")
#def cellranger_count(infile, outfile):
#    '''Docstring'''
#
#    sample = re.search('data/([A-Za-z0-9_]*)/.sample', infile).group(1)
#
#    #fastqs = SAMPLES['fastqs'][sample]
#    cells = SAMPLES['cells'][sample]
#    #chemistry = SAMPLES['chemistry'][sample]
#
#    #transcriptome = PARAMS["transcriptome"]
#
#    datetime = DATETIME
#
#    #job_threads = PARAMS["cellranger"]["count"]["threads"]
#    #job_memory = PARAMS["cellranger"]["count"]["memory"]
#
#    #local_memory = int(job_memory.replace("G", "")) * job_threads
#
#    statement = """
#    %(datetime)s > count/%(sample)s.time &&
#    cellranger count
#        --id %(sample)s
#	--sample %{cells}s
#        --transcriptome %(transcriptome)s
#        --fastqs %(fastqs)s
#        --expect-cells %(cells)s
#        --chemistry %(chemistry)s
#        --localcores %(job_threads)s
#        --localmem %(local_memory)s &&
#        mv %(sample)s count/ &&
#        touch %(outfile)s &&
#    %(datetime)s >> count/%(sample)s.time
#    """
#
#    P.run(statement)
#
#
