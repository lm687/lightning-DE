ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value))+geom_ridgeline() + theme_joy()
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_logfoldchange.pdf"), height = 3, width = 4)
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes[DE_Chrimsonposcells_lights_per_cluster_topgenes$gene %in% names(which(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene) > 2)),],
aes(y=gene, x=value))+geom_ridgeline() + theme_joy()
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_logfoldchange_2.pdf"), height = 3, width = 4)
## summary of most important genes across clusters
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes[DE_Chrimsonposcells_lights_per_cluster_topgenes$gene %in% tail(levels(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene), n=10),], aes(y=gene, x=L1, fill=value))+
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=L1, fill=value))+
scale_fill_gradientn(colours=c(bl,"white", re))+
geom_tile()+ggtitle('Differentially expressed genes between lights ON/OFF per cell cluster\n(most shared genes)')+
theme_bw()+labs(x='Cluster', y='Gene')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenestop10.png"), height = 4, width = 8)
# splitUMAPPlot(Chrimsonposcells, group.by='stim')
# splitUMAPPlot(Chrimsonposcells, group.by='stim_light')
## num of DE genes per cluster
dataset$num_light_DE_genes = table(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1)[match(dataset$seurat_clusters, names(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1)))]
dataset$num_light_DE_genes_any_bool <- !is.na(dataset$num_light_DE_genes)
dataset$num_light_DE_geneslogp1 <- log(dataset$num_light_DE_genes+1)
table(dataset$num_light_DE_genes_any_bool)
## UMAP of lights on/off coloured by feature
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='sr')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_sr.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='Hr38')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_Hr38.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='Hr38', dim_red = "tsne")
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_Hr38_TSNE.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='sr', dim_red = "tsne")
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_sr_TSNE.png"), height = 2.2, width = 4)
## percentages of genes which are DE, in each cluster, including all cells, or separating by Chrimson cells
dataset$num_light_DE_genes[is.na(dataset$num_light_DE_genes)] <- 0
FeaturePlot(dataset, feature='num_light_DE_genes')+ggtitle('Number of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_numDE_UMAP.png"), height = 2.8, width = 4)
FeaturePlot(dataset, feature='num_light_DE_geneslogp1')+ggtitle('Number of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_numDElogp1_UMAP.png"), height = 2.8, width = 4)
FeaturePlot(dataset, feature='num_light_DE_genes_any_bool')+ggtitle('Presence of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_anyDE_UMAP.png"), height = 2.8, width = 4)
# FeaturePlot(Chrimsonposcells, feature='num_light_DE_genes', reduction = 'pca')+ggtitle('Number of DE genes')
# FeaturePlot(Chrimsonposcells, feature='num_light_DE_genes', reduction = 'tsne')+ggtitle('Number of DE genes')
## is there a power issue?
num_DE_genes_cluster = cbind.data.frame(num_DE_genes=as.vector(table(factor(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1, levels=sort(unique(dataset$seurat_clusters))))),
cluster_size=as.vector(table(factor(dataset$seurat_clusters, levels=sort(unique(dataset$seurat_clusters))))),
cluster=sort(unique(dataset$seurat_clusters)))
num_DE_genes_cluster
ggplot(num_DE_genes_cluster, aes(x=cluster_size, y=num_DE_genes))+
geom_point()+geom_smooth(method = "lm")+theme_bw()+labs(x='Size of cluster', y='Number of DE genes in cluster')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_cor_numDEgenes_clustersize.png"), height = 3, width = 3)
}
give_DE_analysis_lightON_lightOFF(Chrimsonposcells, 'chrimsonpos')
give_DE_analysis_lightON_lightOFF <- function(dataset, dataset_name){
dataset@meta.data$stim_light <- (dataset@meta.data$stim %in% c('G1', 'G3'))
dataset@meta.data$stim_light[dataset@meta.data$stim_light] <- 'Lights on'
dataset@meta.data$stim_light[dataset@meta.data$stim_light == 'FALSE'] <- 'Lights off'
DE_Chrimsonposcells_lights <- Seurat::FoldChange(dataset, ident.1='Lights on', ident.2='Lights off', group.by='stim_light')
DE_Chrimsonposcells_lights
DE_Chrimsonposcells_lights_topgenes <- give_top_logf_genes(DE_Chrimsonposcells_lights)
xtable::xtable(DE_Chrimsonposcells_lights_topgenes)
FeaturePlot(dataset, features = rownames(DE_Chrimsonposcells_lights_topgenes))
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_featureplot.png"), height = 6, width = 8)
## volcano plot
# ggplot(DE_Chrimsonposcells_lights, aes(x=avg_log2FC, y=pct.1))+
#   geom_point(alpha=0.01)+lims(x=c(-0.25, 0.25))
# EnhancedVolcano::EnhancedVolcano(DE_Chrimsonposcells_lights, x='avg_log2FC', y='pct.1', lab=rownames(DE_Chrimsonposcells_lights))
## DE of specific clusters between conditions
## https://satijalab.org/seurat/archive/v3.0/de_vignette.html
# FindMarkers(Chrimsonposcells, ident.1 = "Lights on", ident.2 = "Lights off", group.by = "stim_light")
## we are performing DE between conditions
DE_Chrimsonposcells_lights_per_cluster <- give_cluster_specific_DE(dataset,
cluster_name='seurat_clusters',
ident.1='Lights on', ident.2='Lights off', group.by='stim_light')
if(local){
saveRDS(DE_Chrimsonposcells_lights_per_cluster, paste0("/Users/lenamorrill/Documents/projects/lightning/github-repo-lightning-DE/3_results_local/objects/", input_objs, "/", dataset_name, "_DEgenes_per_cluster.RDS"))
}else{
saveRDS(DE_Chrimsonposcells_lights_per_cluster, paste0("~/projects/lighting/data/robjects/", input_objs, "/", dataset_name, "_DEgenes_per_cluster.RDS"))
}
# DE_Chrimsonposcells_lights_per_cluster_topgenes <- lapply(DE_Chrimsonposcells_lights_per_cluster, give_top_logf_genes, include_separation_row=F, n=4)
DE_Chrimsonposcells_lights_per_cluster_topgenes <- lapply(DE_Chrimsonposcells_lights_per_cluster,function(i) i[i$p_val_adj <= 0.05,])
DE_Chrimsonposcells_lights_per_cluster_topgenes <- lapply(DE_Chrimsonposcells_lights_per_cluster_topgenes, function(i) data.frame(gene=rownames(i), avg_log2FC=i[,'avg_log2FC']))
DE_Chrimsonposcells_lights_per_cluster_topgenes <- melt(DE_Chrimsonposcells_lights_per_cluster_topgenes)
table(DE_Chrimsonposcells_lights_per_cluster_topgenes$variable)
DE_Chrimsonposcells_lights_per_cluster_topgenesdcast <- dcast(DE_Chrimsonposcells_lights_per_cluster_topgenes, L1~gene, value.var = "value")
DE_Chrimsonposcells_lights_per_cluster_topgenesdcast[is.na(DE_Chrimsonposcells_lights_per_cluster_topgenesdcast)] <- 0 ## semi-controversial
bl <- colorRampPalette(c("navy","royalblue","lightskyblue"))(200)
re <- colorRampPalette(c("mistyrose", "red2","darkred"))(200)
DE_Chrimsonposcells_lights_per_cluster_topgenes$gene <- factor(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene, levels=names(sort(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene))))
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=L1, fill=value))+
scale_fill_gradientn(colours=c(bl,"white", re), na.value = "grey98")+
geom_tile()+ggtitle('Differentially expressed genes between lights ON/OFF per cell cluster')+
theme_bw()+labs(x='Cluster', y='Gene')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes.png"), height = 11, width = 8)
## to find clustering
select_two_or_more_active <- function(i){
i[,colSums(i>0) > 2]
}
try(dev.off())
pdf(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_cluster.pdf"), height = 3, width = 4)
# print(pheatmap::pheatmap(t(as(select_two_or_more_active(DE_Chrimsonposcells_lights_per_cluster_topgenesdcast[,-1]), 'matrix'))))
print(pheatmap::pheatmap(t(as((DE_Chrimsonposcells_lights_per_cluster_topgenesdcast[,-1]), 'matrix'))))
dev.off()
table(DE_Chrimsonposcells_lights_per_cluster_topgenes$variable)
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value))+geom_ridgeline()
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_logfoldchange.pdf"), height = 3, width = 4)
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes[DE_Chrimsonposcells_lights_per_cluster_topgenes$gene %in% names(which(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene) > 2)),],
aes(y=gene, x=value))+geom_ridgeline()
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_logfoldchange_2.pdf"), height = 3, width = 4)
## summary of most important genes across clusters
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes[DE_Chrimsonposcells_lights_per_cluster_topgenes$gene %in% tail(levels(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene), n=10),], aes(y=gene, x=L1, fill=value))+
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=L1, fill=value))+
scale_fill_gradientn(colours=c(bl,"white", re))+
geom_tile()+ggtitle('Differentially expressed genes between lights ON/OFF per cell cluster\n(most shared genes)')+
theme_bw()+labs(x='Cluster', y='Gene')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenestop10.png"), height = 4, width = 8)
# splitUMAPPlot(Chrimsonposcells, group.by='stim')
# splitUMAPPlot(Chrimsonposcells, group.by='stim_light')
## num of DE genes per cluster
dataset$num_light_DE_genes = table(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1)[match(dataset$seurat_clusters, names(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1)))]
dataset$num_light_DE_genes_any_bool <- !is.na(dataset$num_light_DE_genes)
dataset$num_light_DE_geneslogp1 <- log(dataset$num_light_DE_genes+1)
table(dataset$num_light_DE_genes_any_bool)
## UMAP of lights on/off coloured by feature
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='sr')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_sr.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='Hr38')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_Hr38.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='Hr38', dim_red = "tsne")
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_Hr38_TSNE.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='sr', dim_red = "tsne")
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_sr_TSNE.png"), height = 2.2, width = 4)
## percentages of genes which are DE, in each cluster, including all cells, or separating by Chrimson cells
dataset$num_light_DE_genes[is.na(dataset$num_light_DE_genes)] <- 0
FeaturePlot(dataset, feature='num_light_DE_genes')+ggtitle('Number of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_numDE_UMAP.png"), height = 2.8, width = 4)
FeaturePlot(dataset, feature='num_light_DE_geneslogp1')+ggtitle('Number of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_numDElogp1_UMAP.png"), height = 2.8, width = 4)
FeaturePlot(dataset, feature='num_light_DE_genes_any_bool')+ggtitle('Presence of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_anyDE_UMAP.png"), height = 2.8, width = 4)
# FeaturePlot(Chrimsonposcells, feature='num_light_DE_genes', reduction = 'pca')+ggtitle('Number of DE genes')
# FeaturePlot(Chrimsonposcells, feature='num_light_DE_genes', reduction = 'tsne')+ggtitle('Number of DE genes')
## is there a power issue?
num_DE_genes_cluster = cbind.data.frame(num_DE_genes=as.vector(table(factor(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1, levels=sort(unique(dataset$seurat_clusters))))),
cluster_size=as.vector(table(factor(dataset$seurat_clusters, levels=sort(unique(dataset$seurat_clusters))))),
cluster=sort(unique(dataset$seurat_clusters)))
num_DE_genes_cluster
ggplot(num_DE_genes_cluster, aes(x=cluster_size, y=num_DE_genes))+
geom_point()+geom_smooth(method = "lm")+theme_bw()+labs(x='Size of cluster', y='Number of DE genes in cluster')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_cor_numDEgenes_clustersize.png"), height = 3, width = 3)
}
give_DE_analysis_lightON_lightOFF(Chrimsonposcells, 'chrimsonpos')
dataset <- Chrimsonposcells
dataset_name <- 'chrimsonpos'
dataset@meta.data$stim_light <- (dataset@meta.data$stim %in% c('G1', 'G3'))
dataset@meta.data$stim_light[dataset@meta.data$stim_light] <- 'Lights on'
dataset@meta.data$stim_light[dataset@meta.data$stim_light == 'FALSE'] <- 'Lights off'
DE_Chrimsonposcells_lights <- Seurat::FoldChange(dataset, ident.1='Lights on', ident.2='Lights off', group.by='stim_light')
DE_Chrimsonposcells_lights
DE_Chrimsonposcells_lights_topgenes <- give_top_logf_genes(DE_Chrimsonposcells_lights)
xtable::xtable(DE_Chrimsonposcells_lights_topgenes)
FeaturePlot(dataset, features = rownames(DE_Chrimsonposcells_lights_topgenes))
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_featureplot.png"), height = 6, width = 8)
DE_Chrimsonposcells_lights_per_cluster <- give_cluster_specific_DE(dataset,
cluster_name='seurat_clusters',
ident.1='Lights on', ident.2='Lights off', group.by='stim_light')
if(local){
saveRDS(DE_Chrimsonposcells_lights_per_cluster, paste0("/Users/lenamorrill/Documents/projects/lightning/github-repo-lightning-DE/3_results_local/objects/", input_objs, "/", dataset_name, "_DEgenes_per_cluster.RDS"))
}else{
saveRDS(DE_Chrimsonposcells_lights_per_cluster, paste0("~/projects/lighting/data/robjects/", input_objs, "/", dataset_name, "_DEgenes_per_cluster.RDS"))
}
# DE_Chrimsonposcells_lights_per_cluster_topgenes <- lapply(DE_Chrimsonposcells_lights_per_cluster, give_top_logf_genes, include_separation_row=F, n=4)
DE_Chrimsonposcells_lights_per_cluster_topgenes <- lapply(DE_Chrimsonposcells_lights_per_cluster,function(i) i[i$p_val_adj <= 0.05,])
DE_Chrimsonposcells_lights_per_cluster_topgenes <- lapply(DE_Chrimsonposcells_lights_per_cluster_topgenes, function(i) data.frame(gene=rownames(i), avg_log2FC=i[,'avg_log2FC']))
DE_Chrimsonposcells_lights_per_cluster_topgenes <- melt(DE_Chrimsonposcells_lights_per_cluster_topgenes)
table(DE_Chrimsonposcells_lights_per_cluster_topgenes$variable)
DE_Chrimsonposcells_lights_per_cluster_topgenesdcast <- dcast(DE_Chrimsonposcells_lights_per_cluster_topgenes, L1~gene, value.var = "value")
DE_Chrimsonposcells_lights_per_cluster_topgenesdcast[is.na(DE_Chrimsonposcells_lights_per_cluster_topgenesdcast)] <- 0 ## semi-controversial
bl <- colorRampPalette(c("navy","royalblue","lightskyblue"))(200)
re <- colorRampPalette(c("mistyrose", "red2","darkred"))(200)
DE_Chrimsonposcells_lights_per_cluster_topgenes$gene <- factor(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene, levels=names(sort(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene))))
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=L1, fill=value))+
scale_fill_gradientn(colours=c(bl,"white", re), na.value = "grey98")+
geom_tile()+ggtitle('Differentially expressed genes between lights ON/OFF per cell cluster')+
theme_bw()+labs(x='Cluster', y='Gene')
DE_Chrimsonposcells_lights_per_cluster_topgenes$gene
levels(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene)
length(levels(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene))
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=L1, fill=value))+
scale_fill_gradientn(colours=c(bl,"white", re), na.value = "grey98")+
geom_tile()+ggtitle('Differentially expressed genes between lights ON/OFF per cell cluster')+
theme_bw()+labs(x='Cluster', y='Gene')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes.png"), height = length(levels(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene)), width = 8)
## to find clustering
select_two_or_more_active <- function(i){
i[,colSums(i>0) > 2]
}
try(dev.off())
pdf(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_cluster.pdf"), height = 3, width = 4)
# print(pheatmap::pheatmap(t(as(select_two_or_more_active(DE_Chrimsonposcells_lights_per_cluster_topgenesdcast[,-1]), 'matrix'))))
print(pheatmap::pheatmap(t(as((DE_Chrimsonposcells_lights_per_cluster_topgenesdcast[,-1]), 'matrix'))))
dev.off()
table(DE_Chrimsonposcells_lights_per_cluster_topgenes$variable)
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value))+geom_ridgeline()
?v
?geom_ridgeline
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value, height=1))+geom_ridgeline()
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, height=value))+geom_ridgeline()
head(DE_Chrimsonposcells_lights_per_cluster_topgenes)
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, height=value, x=variable))+geom_ridgeline()
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value))+geom_ridgeline()
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value, height=value))+geom_ridgeline()
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value, height=value))+geom_density_ridges()
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value))+geom_density_ridges()
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value))+geom_density_ridges()
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_logfoldchange.pdf"), height = 3, width = 4)
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes[DE_Chrimsonposcells_lights_per_cluster_topgenes$gene %in% names(which(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene) > 2)),],
aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes[DE_Chrimsonposcells_lights_per_cluster_topgenes$gene %in% names(which(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene) > 2)),],
aes(y=gene, x=value))+geom_density_ridges()
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_logfoldchange_2.pdf"), height = 3, width = 4)
## summary of most important genes across clusters
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes[DE_Chrimsonposcells_lights_per_cluster_topgenes$gene %in% tail(levels(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene), n=10),], aes(y=gene, x=L1, fill=value))+
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=L1, fill=value))+
scale_fill_gradientn(colours=c(bl,"white", re))+
geom_tile()+ggtitle('Differentially expressed genes between lights ON/OFF per cell cluster\n(most shared genes)')+
theme_bw()+labs(x='Cluster', y='Gene')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenestop10.png"), height = 4, width = 8)
## num of DE genes per cluster
dataset$num_light_DE_genes = table(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1)[match(dataset$seurat_clusters, names(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1)))]
dataset$num_light_DE_genes_any_bool <- !is.na(dataset$num_light_DE_genes)
dataset$num_light_DE_geneslogp1 <- log(dataset$num_light_DE_genes+1)
table(dataset$num_light_DE_genes_any_bool)
## UMAP of lights on/off coloured by feature
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='sr')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_sr.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='Hr38')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_Hr38.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='Hr38', dim_red = "tsne")
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_Hr38_TSNE.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='sr', dim_red = "tsne")
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_sr_TSNE.png"), height = 2.2, width = 4)
## percentages of genes which are DE, in each cluster, including all cells, or separating by Chrimson cells
dataset$num_light_DE_genes[is.na(dataset$num_light_DE_genes)] <- 0
FeaturePlot(dataset, feature='num_light_DE_genes')+ggtitle('Number of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_numDE_UMAP.png"), height = 2.8, width = 4)
FeaturePlot(dataset, feature='num_light_DE_geneslogp1')+ggtitle('Number of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_numDElogp1_UMAP.png"), height = 2.8, width = 4)
FeaturePlot(dataset, feature='num_light_DE_genes_any_bool')+ggtitle('Presence of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_anyDE_UMAP.png"), height = 2.8, width = 4)
## is there a power issue?
num_DE_genes_cluster = cbind.data.frame(num_DE_genes=as.vector(table(factor(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1, levels=sort(unique(dataset$seurat_clusters))))),
cluster_size=as.vector(table(factor(dataset$seurat_clusters, levels=sort(unique(dataset$seurat_clusters))))),
cluster=sort(unique(dataset$seurat_clusters)))
num_DE_genes_cluster
ggplot(num_DE_genes_cluster, aes(x=cluster_size, y=num_DE_genes))+
geom_point()+geom_smooth(method = "lm")+theme_bw()+labs(x='Size of cluster', y='Number of DE genes in cluster')
give_DE_analysis_lightON_lightOFF <- function(dataset, dataset_name){
dataset@meta.data$stim_light <- (dataset@meta.data$stim %in% c('G1', 'G3'))
dataset@meta.data$stim_light[dataset@meta.data$stim_light] <- 'Lights on'
dataset@meta.data$stim_light[dataset@meta.data$stim_light == 'FALSE'] <- 'Lights off'
DE_Chrimsonposcells_lights <- Seurat::FoldChange(dataset, ident.1='Lights on', ident.2='Lights off', group.by='stim_light')
DE_Chrimsonposcells_lights
DE_Chrimsonposcells_lights_topgenes <- give_top_logf_genes(DE_Chrimsonposcells_lights)
xtable::xtable(DE_Chrimsonposcells_lights_topgenes)
FeaturePlot(dataset, features = rownames(DE_Chrimsonposcells_lights_topgenes))
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_featureplot.png"), height = 6, width = 8)
## volcano plot
# ggplot(DE_Chrimsonposcells_lights, aes(x=avg_log2FC, y=pct.1))+
#   geom_point(alpha=0.01)+lims(x=c(-0.25, 0.25))
# EnhancedVolcano::EnhancedVolcano(DE_Chrimsonposcells_lights, x='avg_log2FC', y='pct.1', lab=rownames(DE_Chrimsonposcells_lights))
## DE of specific clusters between conditions
## https://satijalab.org/seurat/archive/v3.0/de_vignette.html
# FindMarkers(Chrimsonposcells, ident.1 = "Lights on", ident.2 = "Lights off", group.by = "stim_light")
## we are performing DE between conditions
DE_Chrimsonposcells_lights_per_cluster <- give_cluster_specific_DE(dataset,
cluster_name='seurat_clusters',
ident.1='Lights on', ident.2='Lights off', group.by='stim_light')
if(local){
saveRDS(DE_Chrimsonposcells_lights_per_cluster, paste0("/Users/lenamorrill/Documents/projects/lightning/github-repo-lightning-DE/3_results_local/objects/", input_objs, "/", dataset_name, "_DEgenes_per_cluster.RDS"))
}else{
saveRDS(DE_Chrimsonposcells_lights_per_cluster, paste0("~/projects/lighting/data/robjects/", input_objs, "/", dataset_name, "_DEgenes_per_cluster.RDS"))
}
DE_Chrimsonposcells_lights_per_cluster_topgenes <- lapply(DE_Chrimsonposcells_lights_per_cluster,function(i) i[i$p_val_adj <= 0.05,])
DE_Chrimsonposcells_lights_per_cluster_topgenes <- lapply(DE_Chrimsonposcells_lights_per_cluster_topgenes, function(i) data.frame(gene=rownames(i), avg_log2FC=i[,'avg_log2FC']))
DE_Chrimsonposcells_lights_per_cluster_topgenes <- melt(DE_Chrimsonposcells_lights_per_cluster_topgenes)
table(DE_Chrimsonposcells_lights_per_cluster_topgenes$variable)
DE_Chrimsonposcells_lights_per_cluster_topgenesdcast <- dcast(DE_Chrimsonposcells_lights_per_cluster_topgenes, L1~gene, value.var = "value")
DE_Chrimsonposcells_lights_per_cluster_topgenesdcast[is.na(DE_Chrimsonposcells_lights_per_cluster_topgenesdcast)] <- 0 ## semi-controversial
bl <- colorRampPalette(c("navy","royalblue","lightskyblue"))(200)
re <- colorRampPalette(c("mistyrose", "red2","darkred"))(200)
DE_Chrimsonposcells_lights_per_cluster_topgenes$gene <- factor(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene, levels=names(sort(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene))))
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=L1, fill=value))+
scale_fill_gradientn(colours=c(bl,"white", re), na.value = "grey98")+
geom_tile()+ggtitle('Differentially expressed genes between lights ON/OFF per cell cluster')+
theme_bw()+labs(x='Cluster', y='Gene')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes.png"), height = length(levels(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene)), width = 8)
## to find clustering
select_two_or_more_active <- function(i){
i[,colSums(i>0) > 2]
}
try(dev.off())
pdf(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_cluster.pdf"), height = 3, width = 4)
# print(pheatmap::pheatmap(t(as(select_two_or_more_active(DE_Chrimsonposcells_lights_per_cluster_topgenesdcast[,-1]), 'matrix'))))
print(pheatmap::pheatmap(t(as((DE_Chrimsonposcells_lights_per_cluster_topgenesdcast[,-1]), 'matrix'))))
dev.off()
table(DE_Chrimsonposcells_lights_per_cluster_topgenes$variable)
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes %>% dplyr::filter(gene %in% c('sr', 'Hr38', 'CG14186', 'cbt', 'CG46385')), aes(y=gene, x=value))+geom_ridgeline()
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=value))+geom_density_ridges()
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_logfoldchange.pdf"), height = 3, width = 4)
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes[DE_Chrimsonposcells_lights_per_cluster_topgenes$gene %in% names(which(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene) > 2)),],
aes(y=gene, x=value))+geom_density_ridges()
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenes_logfoldchange_2.pdf"), height = 3, width = 4)
## summary of most important genes across clusters
ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes[DE_Chrimsonposcells_lights_per_cluster_topgenes$gene %in% tail(levels(DE_Chrimsonposcells_lights_per_cluster_topgenes$gene), n=10),], aes(y=gene, x=L1, fill=value))+
# ggplot(DE_Chrimsonposcells_lights_per_cluster_topgenes, aes(y=gene, x=L1, fill=value))+
scale_fill_gradientn(colours=c(bl,"white", re))+
geom_tile()+ggtitle('Differentially expressed genes between lights ON/OFF per cell cluster\n(most shared genes)')+
theme_bw()+labs(x='Cluster', y='Gene')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_percluster_DEgenes_subsetgenestop10.png"), height = 4, width = 8)
# splitUMAPPlot(Chrimsonposcells, group.by='stim')
# splitUMAPPlot(Chrimsonposcells, group.by='stim_light')
## num of DE genes per cluster
dataset$num_light_DE_genes = table(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1)[match(dataset$seurat_clusters, names(table(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1)))]
dataset$num_light_DE_genes_any_bool <- !is.na(dataset$num_light_DE_genes)
dataset$num_light_DE_geneslogp1 <- log(dataset$num_light_DE_genes+1)
table(dataset$num_light_DE_genes_any_bool)
## UMAP of lights on/off coloured by feature
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='sr')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_sr.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='Hr38')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_Hr38.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='Hr38', dim_red = "tsne")
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_Hr38_TSNE.png"), height = 2.2, width = 4)
splitUMAPPlot(dataset, group.by='stim_light', colour_by_feature='sr', dim_red = "tsne")
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_sr_TSNE.png"), height = 2.2, width = 4)
## percentages of genes which are DE, in each cluster, including all cells, or separating by Chrimson cells
dataset$num_light_DE_genes[is.na(dataset$num_light_DE_genes)] <- 0
FeaturePlot(dataset, feature='num_light_DE_genes')+ggtitle('Number of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_numDE_UMAP.png"), height = 2.8, width = 4)
FeaturePlot(dataset, feature='num_light_DE_geneslogp1')+ggtitle('Number of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_numDElogp1_UMAP.png"), height = 2.8, width = 4)
FeaturePlot(dataset, feature='num_light_DE_genes_any_bool')+ggtitle('Presence of DE genes')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_lightONvsOFF_anyDE_UMAP.png"), height = 2.8, width = 4)
# FeaturePlot(Chrimsonposcells, feature='num_light_DE_genes', reduction = 'pca')+ggtitle('Number of DE genes')
# FeaturePlot(Chrimsonposcells, feature='num_light_DE_genes', reduction = 'tsne')+ggtitle('Number of DE genes')
## is there a power issue?
num_DE_genes_cluster = cbind.data.frame(num_DE_genes=as.vector(table(factor(DE_Chrimsonposcells_lights_per_cluster_topgenes$L1, levels=sort(unique(dataset$seurat_clusters))))),
cluster_size=as.vector(table(factor(dataset$seurat_clusters, levels=sort(unique(dataset$seurat_clusters))))),
cluster=sort(unique(dataset$seurat_clusters)))
num_DE_genes_cluster
ggplot(num_DE_genes_cluster, aes(x=cluster_size, y=num_DE_genes))+
geom_point()+geom_smooth(method = "lm")+theme_bw()+labs(x='Size of cluster', y='Number of DE genes in cluster')
ggsave(paste0(folder_results, input_objs, "/", dataset_name, "/", dataset_name, "_cor_numDEgenes_clustersize.png"), height = 3, width = 3)
}
give_DE_analysis_lightON_lightOFF(Chrimsonposcells, 'chrimsonpos')
## check, for each cluster in the all-cells dataset, to what extent it is composed of chrimson+cells
chrimson_exprs_per_cluster0 <- sapply(levels(combined_dataset$seurat_clusters), function(cluster_it){
mean(combined_dataset@assays$RNA['Chrimson'][,combined_dataset$seurat_clusters == cluster_it] > 0)
})
dimnames(Chrimsonpos)[[2]]
dimnames(Chrimsonposcells)[[2]]
## check, for each cluster in the all-cells dataset, to what extent it is composed of chrimson+cells
chrimson_exprs_per_cluster0 <- sapply(levels(combined_dataset$seurat_clusters), function(cluster_it){
mean( dimnames(combined_dataset@assays$RNA[,combined_dataset$seurat_clusters == cluster_it])[[2]] %in% dimnames(Chrimsonposcells)[[2]] )
})
hist(chrimson_exprs_per_cluster0)
chrimson_exprs_per_cluster <- cbind.data.frame(chrimson_exprs_per_cluster0, cluster=names(chrimson_exprs_per_cluster0), ordered=as.integer(rank(-chrimson_exprs_per_cluster0)))
chrimson_exprs_per_cluster <- chrimson_exprs_per_cluster[order(chrimson_exprs_per_cluster$chrimson_exprs_per_cluster0),]
plot(chrimson_exprs_per_cluster$ordered, chrimson_exprs_per_cluster$chrimson_exprs_per_cluster0)
ggplot(chrimson_exprs_per_cluster,
aes(x = ordered, label=cluster,
# x=factor(cluster, levels=cluster[order(chrimson_exprs_per_cluster, decreasing =T)]),
y=chrimson_exprs_per_cluster0, group=1))+
geom_point()+geom_line()+theme_bw()+lims(x=c(0,10))+geom_label_repel()+
labs(x='Cluster', y='Fraction of cells in cluster expressing Chrimson')
library(ggrepel)
ggplot(chrimson_exprs_per_cluster,
aes(x = ordered, label=cluster,
# x=factor(cluster, levels=cluster[order(chrimson_exprs_per_cluster, decreasing =T)]),
y=chrimson_exprs_per_cluster0, group=1))+
geom_point()+geom_line()+theme_bw()+lims(x=c(0,10))+geom_label_repel()+
labs(x='Cluster', y='Fraction of cells in cluster expressing Chrimson')
ggsave(paste0(folder_results, input_objs, "/fraction_chrimson_in_clusters.pdf"), height = 4, width = 4)
paste0(folder_results, input_objs, "/fraction_chrimson_in_clusters.pdf")
combined_dataset$chrimsonpos <- ( dimnames(combined_dataset@assays$RNA)[[2]] %in% dimnames(Chrimsonposcells)[[2]] )
UMAPPlot(combined_dataset, group.by='chrimsonpos')
ggsave(paste0(folder_results, input_objs, "/UMAP_chrimson_status.pdf"), height = 4, width = 4)
ggsave(paste0(folder_results, input_objs, "/umap_chrimson_status.pdf"), height = 4, width = 4)
UMAPPlot(combined_dataset, group.by='chrimsonpos')+ggtitle('Chrimson+ cells')
UMAPPlot(combined_dataset, group.by='chrimsonpos')+ggtitle('Chrimson+ cells')
ggsave(paste0(folder_results, input_objs, "/umap_chrimson_status.pdf"), height = 4, width = 4.5)
ggplot(chrimson_exprs_per_cluster,
aes(x = ordered, label=cluster,
# x=factor(cluster, levels=cluster[order(chrimson_exprs_per_cluster, decreasing =T)]),
y=chrimson_exprs_per_cluster0, group=1))+
geom_point()+geom_line()+theme_bw()+lims(x=c(0,10))+geom_label_repel()+
labs(x='Cluster', y='Fraction of cells in cluster expressing Chrimson')
chrimson_exprs_per_cluster
combined_dataset$seurat_clusters
chrimson_exprs_per_cluster$cluster
combined_dataset$seurat_clusters
as.numeric(combined_dataset$seurat_clusters)
as.numericas.numeric(chrimson_exprs_per_cluster$cluster)
as.numeric(chrimson_exprs_per_cluster$cluster)
chrimson_exprs_per_cluster$chrimson_exprs_per_cluster0
combined_dataset$chrimsonposfraccluster <- chrimson_exprs_per_cluster$chrimson_exprs_per_cluster0[match(as.numeric(combined_dataset$seurat_clusters),
as.numeric(chrimson_exprs_per_cluster$cluster))]
FeaturePlot(combined_dataset, feature='chrimsonposfraccluster')+ggtitle('Chrimson+ cells')
FeaturePlot(combined_dataset, feature='chrimsonposfraccluster')+ggtitle('Fraction of Chrimson+\ncells in cluster')
FeaturePlot(combined_dataset, feature='chrimsonposfraccluster')+ggtitle('Fraction of Chrimson+\ncells in cluster')
ggsave(paste0(folder_results, input_objs, "/umap_fraction_chrimson.pdf"), height = 4, width = 4.5)
FeaturePlot(combined_dataset, feature='chrimsonposfraccluster')+ggtitle('Fraction of Chrimson+\ncells in clusters')
ggsave(paste0(folder_results, input_objs, "/umap_fraction_chrimson.pdf"), height = 4, width = 4.5)
col_vector <- readRDS("~/small_practical_robjects/col_vector1.RDS")
library(RColorBrewer)
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
pie(rep(1,n), col=sample(col_vector, n))
col_vector <- sample(colours(), size = 100)
system("mkdir ~/Documents/projects/small_practical_robjects/")
saveRDS(col_vector, "~/Documents/projects/small_practical_robjects/col_vector4.RDS")
?v
?UMAPPlot
UMAPPlot(combined_dataset)+ggtitle('Fraction of Chrimson+\ncells in clusters')
UMAPPlot(combined_dataset, cols=col_vector)+ggtitle('Fraction of Chrimson+\ncells in clusters')
saveRDS(col_vector, "~/Documents/projects/small_practical_robjects/col_vector4.RDS")
UMAPPlot(chrimsonpos, cols=col_vector)
UMAPPlot(Chrimsonposcells, cols=col_vector)
Chrimsonposcells$seurat_clusters
chrimson_exprs_per_cluster
chrimson_exprs_per_cluster0
UMAPPlot(combined_dataset, cols=col_vector)
MARKERS_lower_granularity
combined_dataset$integrated_snn_res.4
combined_dataset$integrated_snn_res.0.01
MARKERS_lowest_granularity
umap_facets_with_topmarker(combined_dataset, markers = MARKERS_lowest_granularity, seurat_name_clusters = 'integrated_snn_res.0.01')
umap_single_facet_with_topmarker(combined_dataset, markers = MARKERS_lowest_granularity,
seurat_name_clusters = 'integrated_snn_res.0.01')
Chrimsonnegcells <- subset(combined_dataset, cells = which(!Chrimsonpos))
options (future.globals.maxSize = 4000 * 1024^5)
Chrimsonnegcells <- FindVariableFeatures(Chrimsonnegcells)
Chrimsonnegcells <- add_dimred(Chrimsonnegcells)
options (future.globals.maxSize = 8000 * 1024^5)
Chrimsonnegcells <- add_dimred(Chrimsonnegcells)
rm(list = ls())
set.seed(1234)
library(Seurat)
library(ggplot2)
library(cowplot)
library(plotly)
library(reshape2)
library(gridExtra)
library(DropletUtils)
theme_set(theme_cowplot())
local <- T
if(local){
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# folder_input <- '../../github-repo-lightning-DE/3_results_local/dmel649Chrimson/' ## not all files are available
folder_input <- '../../github-repo-lightning-DE/3_results_local/dmel649CORRECTED//' ## not all files are available
}else{
## CCB cluster
setwd("/t1-data/project/cncb/shared/proj002/analyses/2020/10kCells/")
folder_input <- './'
}
samples <- apply(expand.grid(paste0('G', 1:4), paste0('_rep', 1:2)), 1, paste0, collapse='')
samples
input_files <- lapply(samples, function(rep_it){
cat(rep_it, '\n')
# filtered_folder <- paste0(folder_input, rep_it, '/', rep_it, '/outs/filtered_feature_bc_matrix')
raw_folder <- paste0(folder_input, rep_it, '/', rep_it, '/outs/raw_feature_bc_matrix')
print(raw_folder)
Read10X(raw_folder)
})
names(input_files) <- samples
input_files
# ## Empty droplets, doublets
emptydrops <- lapply(input_files, function(rep_it) DropletUtils::emptyDrops(m = as(assay(rep_it), 'matrix')))
emptyDrops(input_files[[1]])
# ## Empty droplets, doublets
emptydrops <- lapply(input_files, function(rep_it) DropletUtils::emptyDrops(m = rep_it))
emptydrops
# ## Empty droplets, doublets
barcoderanks_out <- lapply(input_files, function(rep_it) DropletUtils::barcodeRanks(m = rep_it))
barcoderanks_out
barcoderanks_out$G1_rep1[,1:2]
plot(barcoderanks_out$G1_rep1[,1:2])
plot(as(barcoderanks_out$G1_rep1[,1:2], 'matrix'))
emptydrops$G1_rep1
swappeddrops <- lapply(input_files, function(rep_it) DropletUtils::swappedDrops(m = rep_it))
swappeddrops <- lapply(input_files, function(rep_it) DropletUtils::swappedDrops(rep_it))
swappeddrops
swappeddrops <- lapply(input_files, function(rep_it) DropletUtils::swappedDrops(rep_it))
input_files
## QC
perCellQCFilters_out <- scuttle::perCellQCFilters(input_files)
## QC
perCellQCFilters_out <- lapply(input_files, scuttle::perCellQCFilters)
input_files
## QC
perCellQCFilters_out <- lapply(input_files, function(i) scuttle::perCellQCFilters(as(i, 'matrix')))
perFeatureQCFilters_out <- lapply(input_files, function(i) scuttle::perFeatureQCFilters(as(i, 'matrix')))
## QC
perCellQCMetrics_out <- lapply(input_files, function(i) scuttle::perCellQCMetrics(as(i, 'matrix')))
perFeatureQCMetrics_out <- lapply(input_files, function(i) scuttle::perFeatureQCMetrics(as(i, 'matrix')))
